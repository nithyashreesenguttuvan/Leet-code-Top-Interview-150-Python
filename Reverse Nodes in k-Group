# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def reverse(head, k):
            prev, curr = None, head
            while k:
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
                k -= 1
            return prev

    # Function to count the number of nodes in the linked list
        def countNodes(head):
            count = 0
            while head:
                head = head.next
                count += 1
            return count

        dummy = ListNode(0)
        dummy.next = head
        group_prev = dummy

        num_nodes = countNodes(head)
        while num_nodes >= k:
        # Find the kth node
            group_end = group_prev
            for _ in range(k):
                group_end = group_end.next
            if not group_end:
                break
        
            next_group = group_end.next
        # Reverse the current group
            prev, curr = None, group_prev.next
            for _ in range(k):
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp

        # Adjust the pointers
            temp = group_prev.next
            group_prev.next = prev
            temp.next = next_group

            group_prev = temp
            num_nodes -= k

        return dummy.next
