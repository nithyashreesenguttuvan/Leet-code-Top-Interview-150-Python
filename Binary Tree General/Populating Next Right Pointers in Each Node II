"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return None
    
    # Initialize the queue with the root node
        queue = deque([root])
    
        while queue:
            level_size = len(queue)
            prev_node = None
        
            for i in range(level_size):
            # Pop a node from the front of the queue
                node = queue.popleft()
            
            # If there's a previous node in this level, link it to the current node
                if prev_node:
                    prev_node.next = node
                prev_node = node
            
            # Add the children of the current node to the queue
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        
        # The last node in the level should point to None
            if prev_node:
                prev_node.next = None
    
        return root
