# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
        if not inorder or not postorder:
            return None

    # The last element in postorder is the root of the current tree
        root_val = postorder.pop()
        root = TreeNode(root_val)

    # Find the index of the root value in inorder array
        root_index = inorder.index(root_val)

    # Recursively build the right and left subtrees
    # For postorder traversal, right subtree is visited before left subtree
        root.right = self.buildTree(inorder[root_index + 1:], postorder)
        root.left = self.buildTree(inorder[:root_index], postorder)

        return root
