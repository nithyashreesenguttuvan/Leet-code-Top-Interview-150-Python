class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
    
        digit_to_letters = {
        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
        }
    
        result = []
    
        def backtrack(index, path):
        # If the path length is equal to the digits length, we have a complete combination
            if len(path) == len(digits):
                result.append("".join(path))
                return
        
        # Get the letters that the current digit maps to, and loop through them
            possible_letters = digit_to_letters[digits[index]]
            for letter in possible_letters:
                path.append(letter)
                backtrack(index + 1, path)
                path.pop()  # Backtrack
    
        backtrack(0, [])
        return result
