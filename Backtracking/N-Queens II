class Solution:
    def totalNQueens(self, n: int) -> int:
        def is_not_under_attack(row, col):
        # Check if any queens placed earlier attack this position
            for prev_row in range(row):
            # Check columns and diagonals
                if col == queens[prev_row] or \
                    abs(queens[prev_row] - col) == abs(prev_row - row):
                    return False
            return True

        def place_queen(row):
            if row == n:
            # If all queens are placed successfully
                return 1
            solutions = 0
            for col in range(n):
                if is_not_under_attack(row, col):
                    queens[row] = col  # Place queen
                    solutions += place_queen(row + 1)
                    queens[row] = -1  # Backtrack
            return solutions

        queens = [-1] * n  # Initialize queens positions
        return place_queen(0)
