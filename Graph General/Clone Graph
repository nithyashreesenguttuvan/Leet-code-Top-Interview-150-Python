"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return node
    
    # A dictionary to save the visited node and its respective clone
        visited = {}
    
    # Put the first node in the queue
        queue = [node]
    # Clone the first node and put it in the visited dictionary
        visited[node] = Node(node.val, [])
    
    # Start BFS traversal
        while queue:
        # Pop a node from the front of the queue
            n = queue.pop(0)
        # Iterate through all the neighbors of this node
            for neighbor in n.neighbors:
                if neighbor not in visited:
                # Clone the neighbor and put it in the visited dictionary
                    visited[neighbor] = Node(neighbor.val, [])
                # Add the neighbor to the queue for further traversal
                    queue.append(neighbor)
            # Append the clone of the neighbor to the neighbors of the clone node
                visited[n].neighbors.append(visited[neighbor])
    
    # Return the clone of the starting node
        return visited[node]
