class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
         # Build the graph
        graph = defaultdict(dict)
        for (numerator, denominator), value in zip(equations, values):
            graph[numerator][denominator] = value
            graph[denominator][numerator] = 1 / value
    
    # Define DFS function
        def dfs(current, target, visited):
            if current == target:
                return 1.0
            visited.add(current)
            for neighbor, value in graph[current].items():
                if neighbor not in visited:
                    result = dfs(neighbor, target, visited)
                    if result != -1.0:
                        return result * value
            return -1.0
    
    # Perform DFS for each query
        results = []
        for numerator, denominator in queries:
            if numerator not in graph or denominator not in graph:
                results.append(-1.0)
            else:
                results.append(dfs(numerator, denominator, set()))
        return results
