class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
    
    # Convert the board to a 1D array
        def get_board_value(index):
            row = (index - 1) // n
            col = (index - 1) % n
            if row % 2 == 0:
                return board[n - 1 - row][col]
            else:
                return board[n - 1 - row][n - 1 - col]
    
        visited = set()
        queue = deque([(1, 0)])  # (current square, number of moves)
    
        while queue:
            curr, moves = queue.popleft()
        
            for i in range(1, 7):
                next_square = curr + i
                if next_square > n * n:
                    continue
            
                value = get_board_value(next_square)
                if value != -1:
                    next_square = value
            
                if next_square == n * n:
                    return moves + 1
            
                if next_square not in visited:
                    visited.add(next_square)
                    queue.append((next_square, moves + 1))
    
        return -1
