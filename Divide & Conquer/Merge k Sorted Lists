# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists or len(lists) == 0:
            return None
    
    # Custom comparator for the priority queue
        class Wrapper:
            def __init__(self, node):
                self.node = node
        
            def __lt__(self, other):
                return self.node.val < other.node.val

    # Create a min-heap
        min_heap = []

    # Initialize the heap with the head nodes of each list
        for l in lists:
            if l:
                heappush(min_heap, Wrapper(l))
    
    # Dummy head to help with easier result list construction
        dummy = ListNode()
        current = dummy
    
        while min_heap:
        # Extract the smallest node from the heap
            smallest_node = heappop(min_heap).node
        
        # Add the smallest node to the merged list
            current.next = smallest_node
            current = current.next
        
        # If there is a next node, push it into the heap
            if smallest_node.next:
                heappush(min_heap, Wrapper(smallest_node.next))
    
        return dummy.next
