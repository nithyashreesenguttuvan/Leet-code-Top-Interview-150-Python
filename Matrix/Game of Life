class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        m, n = len(board), len(board[0])
    
        def count_live_neighbors(i, j):
            live_neighbors = 0
            for x in range(max(0, i-1), min(m, i+2)):
                for y in range(max(0, j-1), min(n, j+2)):
                    if (x != i or y != j) and (board[x][y] & 1):
                        live_neighbors += 1
            return live_neighbors
    
        for i in range(m):
            for j in range(n):
                live_neighbors = count_live_neighbors(i, j)
                if board[i][j] & 1:  # Current cell is live
                    if live_neighbors == 2 or live_neighbors == 3:
                        board[i][j] |= 2  # Set the 2nd bit to 1 (live in next state)
                else:  # Current cell is dead
                    if live_neighbors == 3:
                        board[i][j] |= 2  # Set the 2nd bit to 1 (live in next state)

        for i in range(m):
            for j in range(n):
                board[i][j] >>= 1  # Shift the bits right to update to the next state
