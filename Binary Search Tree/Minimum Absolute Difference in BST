# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:
        def in_order_traversal(node):
            if node is None:
                return []
            return in_order_traversal(node.left) + [node.val] + in_order_traversal(node.right)
    
    # Get the sorted list of values from the BST
        sorted_values = in_order_traversal(root)
    
    # Initialize the minimum difference to a large value
        min_diff = float('inf')
    
    # Iterate through the sorted values to find the minimum absolute difference
        for i in range(1, len(sorted_values)):
            min_diff = min(min_diff, sorted_values[i] - sorted_values[i - 1])
    
        return min_diff
