# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def helper(node, min_val, max_val):
        # An empty node is considered valid
            if not node:
                return True
        # The current node must be within the range [min_val, max_val]
            if not (min_val < node.val < max_val):
                return False
        # Recursively check the left and right subtrees
            return (helper(node.left, min_val, node.val) and
                helper(node.right, node.val, max_val))
    
    # Initialize the recursion with the whole range of integer values
        return helper(root, float('-inf'), float('inf'))
