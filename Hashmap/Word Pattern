class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        words = s.split()
    
    # Check if the lengths of pattern and words match
        if len(pattern) != len(words):
            return False
    
    # Dictionaries to hold the bijection mappings
        char_to_word = {}
        word_to_char = {}
    
        for char, word in zip(pattern, words):
            if char in char_to_word:
                if char_to_word[char] != word:
                    return False
            else:
                if word in word_to_char:
                    if word_to_char[word] != char:
                        return False
                char_to_word[char] = word
                word_to_char[word] = char
    
        return True
